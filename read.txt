https://developer.paypal.com/home
https://www.sandbox.paypal.com/

FRONTEND
mkdir ecommerce
cd ecommerce
npx create-react-app frontend
downloaded bootstrap theme from bootswatch.com
npm install react-bootstrap                 [https://react-bootstrap.netlify.app/]
npm install react-router-dom
npm install react-router-bootstrap
npm install axios
npm install redux 
npm install react-redux
npm install redux-thunk
npm i redux-devtools-extension       # connects store to browser extension
npm i react-paypal-button-v2

BACKEND
cd ecommerce
pip3 install virtualenv
virtualenv myenv
myenv/scripts/activate      (for windows)
source myenv/bin/activate   (for mac)
pip3 install django
django-admin.py startproject backend
cd backend  ( Make sure virutal enviornment is turned on )
python3 manage.py runserver

python3 manage.py startapp base
pip3 install djangorestframework            [https://www.django-rest-framework.org/]
pip install django-cors-headers             [https://pypi.org/project/django-cors-headers/]
pip install pillow     [ image processing library used for models ]

# Check you JSON web token  https://jwt.io/
pip install djangorestframework-simplejwt       #JSON web token download for djangorestframework (https://django-rest-framework-simplejwt.readthedocs.io/en/latest/)

pip install psycopg2  (If that is not working install) 
pip install psycopg2-binary

python manage.py createsuperuser

pip install django-storages
pip install boto3
pip install whitenoise
pip install django-environ





* Connect React server with Django *        [Reason home port was left empty]
Turn off both servers and close out terminals
Inside of the home folder
take frontend folder and push it into the backend folder

inside terminal window
cd backend 
cd frontend
npm run build       [ take React files and turn into static assets]

Now inside of the build folder the entire project sits inside of the index.html file

We need to point django to the build folder and index.html inside
[ quick note when changes are made we will need to run, run build  in terminal]

In backend settings.py import os and inside of TEMPLATES
    'DIRS': [
        os.path.join(BASE_DIR, 'frontend/build')        [Tells BASE_DIR to look inside of build and see index.html]
    ],

Now inside of backend urls import, import django.views.generic import TemplateView

Create path inside of the urls file
path('', TemplateView.as_view(template_name='index.html')),

In settings.py STATICFILES_DIRS add another path
BASE_DIR / 'frontend/build/static'      # Look for static files in the frontend

To allow Django to change routes using react server we need to go into App.js and change BrowserRouter to a HashRouter
import { HashRouter as Router, Route } from 'react-router-dom'
react server url should now be http://127.0.0.1:8000/#/8
 
run build, and django server should have a url like http://127.0.0.1:8000/#/




SETTING UP AWS
sign in search for rds
select your engine
(free tier for project)
make sure inbound and outbound are set to 0.0.0.0/0

make sure public access is set to = Yes

click on created db and get the EndPoint
go into engine (db) 
create a new server
go to properties 
connection and change Host to endpoint provided by aws
Then fill out the username and password with the username and password you used when creating the AWS db

After go into settings.py and import AWS database to django and run
python3 manage.py migrate

(Live server updates live server and local server at the same time)

python manage.py createsuperuser





STORING IMAGES IN AWS S3 BUCKET
got to aws and search for Iam 
create a user and give all programmatic access 
set permissions go to attach exisiting policies directly, look for s3, and click AmazonS3FullAccess
finish creating user by pressing next
USE ACCESS KEY AND SECRET KEY AT BOTTOM OF settings.py

AWS_ACCESS_KEY_ID = 'AKIAWOLMCLZ4YRDHGYUD'
AWS_SECRET_ACCESS_KEY =  '***************'

NOW AT THE BOTTOM IMPORT THE BUCKET NAME
AWS_STORAGE_BUCKET_NAME = 'electroshop'

go to aws and search for s3
create a bucket
turn off blocking public access
When bucket is created go into the bucket and go into permissions
edit bucket policy and add this code (modify as needed), makes it a public bucket, people can see and grab info but they cannot upload
{
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "AllowPublicRead",
            "Effect": "Allow",
            "Principal": {
                "AWS": "*"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
    ]
}

Now you can go into the bucket, select the photo and click on the url and see the photo and send to anyone

Now to set up django to send the photos we upload to our bucket

First install 
pip install boto3
pip install django-storages             (https://django-storages.readthedocs.io/en/latest/)

Go into settings.py
add 'storages' inside of INSTALLED_APPS

at the bottom of settings.py add
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

(eliminate extra info when looking at image url)
AWS_QUERYSTRING_AUTH = False


SETTING UP HEROKU
Click new       create a new app

open app will open your webpage and show you your link in the url

in settings set up buildpacks

(You can go to the settings for your app and set up enviornment variables, input the info you don't want being shared EX: db_pass pass )

Heroku needs for python
requirements.txt (any donwnloaded files like pillow)
setup.py
Pipfile

pip install gunicorn  # connects us to our web: gunicorn myproject.wsgi

Before pushing to live go to settings.py and set DEBUG to False
When DEBUG is False we need to set ALLOWED_HOSTS and that is our url ['127.0.0.1', 'localhost']     server should run again
In settings.py add static_root   STATIC_ROOT = BASE_DIR / 'staticfiles' 
python manage.py collectstatic          # Places static files in staticfiles for deployment
in base urls.py add,     urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

(any time you need to update staticfiles run     collect static)

Now we need django whitenoise so it can serve up its own static files
pip install whitenoise

add whitenoise into middleware inside of settings.py    above all other middleware apart from Djangoâ€™s SecurityMiddleware:
'whitenoise.middleware.WhiteNoiseMiddleware',

We should be able to run server again

Now set DEBUG back to true, as it no longer matters

at the bottom of settings.py use an if statement to turn DEBUG off when django is on Heroku
if os.getcwd() == '/app':       # if current working directory is heroku set DEBUG to False
    DEBUG = False

inside of backend create a new file Procfile

pip install gunicorn
Inside of that file configure process type for dyno (want to connect it to wsgi.py)     Looking at backend then wsgi.py inside of backend
web: gunicorn backend.wsgi --log-file-

run pip freeze > requirements.txt inside of terminal and python will look at all donwloaded files and create a file with all requirements

inside of backend create a new file runtime.txt

inside that file let heroku know what version of python you are running (can use python --version)
python-3.9.1

You want django to add in url from heroku to django to allow host
Go to heroku and open app, take the link and place it inside of settings.py   ALLOWED_HOSTS     [trim url Ex: 'electroshop-demo.herokuapp.com']

Inside of the frontend folder, inside of .gitignore erase   build/   from the file because we want that to be pushed live

Before pushing live let's hide our sensitive information
pip install django-environ

instructions on how to use environ  https://alicecampkin.medium.com/how-to-set-up-environment-variables-in-django-f3c4db78c55f

After sensitive info is hidden push to github but from your backend folder so other files that are not needed are left out

Deploy app (we will be using github)